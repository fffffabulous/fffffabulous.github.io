{"meta":{"title":"fffffabulous","subtitle":"","description":"","author":"fffffabulous","url":"http://fffffabulous.github.io","root":"/"},"pages":[{"title":"书单","date":"2019-12-06T14:01:16.605Z","updated":"2019-12-06T14:01:16.605Z","comments":false,"path":"books/index.html","permalink":"http://fffffabulous.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-12-06T13:46:15.654Z","updated":"2019-12-06T13:46:15.645Z","comments":false,"path":"categories/index.html","permalink":"http://fffffabulous.github.io/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2019-12-06T16:44:50.378Z","updated":"2019-12-06T16:44:50.378Z","comments":false,"path":"about/index.html","permalink":"http://fffffabulous.github.io/about/index.html","excerpt":"","text":"{ name: 'fffffabulou' gender: '男', profession: 'Web Developer &amp; Designer', experience: '1年', address: '广东省', education: '本科', github: 'https://github.com/fffffabulous', blog: 'http://fabulous528.club', email: 'luw0528@126.com', description: '致力于网站建设与前端用户体验设计', skills: [ ['Html', 'Javascript', 'Http', 'CSS', 'ES6', 'Node'], ['Webpack'], ['Less','Sass'], ['Git', 'SVN'], ['Vue'], ['webstorm', 'atom', 'vscode'], ] }"},{"title":"友情链接","date":"2019-12-06T13:41:11.827Z","updated":"2019-12-06T13:41:11.827Z","comments":true,"path":"links/index.html","permalink":"http://fffffabulous.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-12-06T13:39:02.693Z","updated":"2019-12-06T13:39:02.692Z","comments":false,"path":"repository/index.html","permalink":"http://fffffabulous.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-12-06T14:31:39.425Z","updated":"2019-12-06T14:31:39.425Z","comments":false,"path":"tags/index.html","permalink":"http://fffffabulous.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"AJAX的使用与封装","slug":"ajax","date":"2019-12-06T17:01:19.000Z","updated":"2019-12-06T17:08:46.733Z","comments":true,"path":"2019/12/07/ajax/","link":"","permalink":"http://fffffabulous.github.io/2019/12/07/ajax/","excerpt":"","text":"// AJAX 和使用方法 // ajax 就是浏览器提供的用 js 获取链接内容的 API // 可以理解为发送网络请求的标准库 // 获取登录页面 // 创建 AJAX 对象 let r = new XMLHttpRequest() // 设置请求方法和请求地址 r.open('GET', '/login', true) // 注册响应函数 r.onreadystatechange = function() { console.log('state change', r) } // 发送请求 r.send() // 发送登录数据 let r = new XMLHttpRequest() // 设置请求方法和请求地址 r.open('POST', '/api/user/login', true) // 设置发送的数据的格式 r.setRequestHeader('Content-Type', 'application/json') // 注册响应函数 r.onreadystatechange = function() { if (r.readyState === 4) { console.log('state change', r, r.status, r.response) let response = JSON.parse(r.response) console.log('response', response) } else { console.log('change') } } // 发送请求 let account = { phone: 'gua', password: '123', } let data = JSON.stringify(account) r.send(data) // 可以封装成这样的一个函数 const ajax = (method, path, data, responseCallback) =&gt; { // 发送登录数据 let r = new XMLHttpRequest() // 设置请求方法和请求地址 r.open(method, path, true) // 设置发送的数据的格式 r.setRequestHeader('Content-Type', 'application/json') // 注册响应函数 r.onreadystatechange = function() { if (r.readyState === 4) { // console.log('state change', r, r.status, r.response) // let response = JSON.parse(r.response) // console.log('response', response) responseCallback(r.response) } else { console.log('change') } } r.send(data) }","categories":[],"tags":[{"name":"AJAX","slug":"AJAX","permalink":"http://fffffabulous.github.io/tags/AJAX/"},{"name":"封装","slug":"封装","permalink":"http://fffffabulous.github.io/tags/%E5%B0%81%E8%A3%85/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-12-06T03:24:46.747Z","updated":"2019-12-06T14:58:38.353Z","comments":true,"path":"2019/12/06/hello-world/","link":"","permalink":"http://fffffabulous.github.io/2019/12/06/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"git生成ssh秘钥","slug":"code","date":"2018-11-06T12:48:44.000Z","updated":"2019-12-06T16:47:36.901Z","comments":true,"path":"2018/11/06/code/","link":"","permalink":"http://fffffabulous.github.io/2018/11/06/code/","excerpt":"","text":"// 查看是否存在秘钥 $ cd ~/.ssh // 配置用户相关信息 $ git config –-global user.name ‘xxxxx’ $ git config –-global user.email ‘xxx@xx.xxx’ // 查看用户配置的相关信息 $ git config user.name $ git config user.email // 生成秘钥 (邮箱为上方配置的邮箱) $ ssh-keygen -t rsa -C ‘xxx@xx.xxx’ // 连按三个空格 Generating public/private rsa key pair. Enter file in which to save the key (/c/Users/Mr.Yang/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /c/Users/Mr.Yang/.ssh/id_rsa. Your public key has been saved in /c/Users/Mr.Yang/.ssh/id_rsa.pub. The key fingerprint is: SHA256:zA6wNJrFB6NcqS6eBog/AHlzQuvFjYpG759Yhh1lWGI xxxxxx@xxxxx.xxx(上面自己的邮箱) The key\"s randomart image is: +---[RSA 2048]----+ | +E . | | ..+oo+ | | oo+*+.o | |o.*===+o | |==+*... S | |B.+.o .o | |++o. + . | | +o.+ . | |. o.o | +----[SHA256]-----+","categories":[],"tags":[{"name":"SSH","slug":"SSH","permalink":"http://fffffabulous.github.io/tags/SSH/"}]},{"title":"HTTP","slug":"js","date":"2018-03-06T16:51:20.000Z","updated":"2019-12-06T17:00:01.302Z","comments":true,"path":"2018/03/07/js/","link":"","permalink":"http://fffffabulous.github.io/2018/03/07/js/","excerpt":"","text":"电脑通信靠IP地址，IP地址记不住就发明了域名（domain name），然后电脑 自动向DNS服务器（domain name server）查询域名对应的IP地址 比如g.cn这样的网址，可以通过电脑的ping程序查出对应 IP 地址 ➜ ping g.cn PING g.cn (203.208.41.55): 56 data bytes 端口是什么？ 一个比喻： 用邮局互相写信的时候，ip相当于地址（也可以看做邮编，地址是域名） 端口是收信人姓名（因为一个地址比如公司、家只有一个地址，但是却可能有很多收信人） 端口就是一个标记收信人的数字。 端口是一个 16 位的数字，所以范围是 0-65535（2**16） 安全程度：Linux &gt; Mac &gt;&gt; Windows, iPhone &gt;&gt; Android ——HTTP协议—— 一个传输协议，协议就是双方都遵守的规范。 为什么叫超文本传输协议呢，因为收发的是文本信息。 1，浏览器（客户端）按照规定的格式发送文本数据（请求）到服务器 2，服务器解析请求，按照规定的格式返回文本数据（响应）到浏览器 3，浏览器解析得到的数据（响应），并做相应处理 请求和响应是一样的数据格式，分为 4 部分： 1，请求行或者响应行 2，Header（请求的 Header 中 Host 字段是必须的，其他都是可选） 3，\\r\\n\\r\\n（连续两个换行回车符，用来分隔Header和Body） 4，Body（可选） 请求的格式，注意大小写（这是一个不包含Body的请求）： 原始数据如下 'GET / HTTP/1.1\\r\\nhost:g.cn\\r\\n\\r\\n' 打印出来如下 GET / HTTP/1.1 host: g.cn 其中 1， GET 是请求方法（还有POST等，这就是个标志字符串而已） 2，/ 是请求的路径（这代表根路径） 3，HTTP/1.1 中，1.1是版本号，通用了20年 具体字符串是 'GET / HTTP/1.1\\r\\nhost:g.cn\\r\\n\\r\\n' 返回的数据(响应)如下 HTTP/1.1 301 Moved Permanently Alternate-Protocol: 80:quic,p=0,80:quic,p=0 Cache-Control: private, max-age=2592000 Content-Length: 218 Content-Type: text/html; charset=UTF-8 Date: Tue, 07 Jul 2015 02:57:59 GMT Expires: Tue, 07 Jul 2015 02:57:59 GMT Location: http://www.google.cn/ Server: gws X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block","categories":[],"tags":[]}]}